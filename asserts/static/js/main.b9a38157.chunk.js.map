{"version":3,"sources":["GlobalVariables.js","layouts/Navbar.js","components/Login.js","App.js","serviceWorker.js","index.js"],"names":["hostname","Navbar","props","logoutButton","id","react_default","a","createElement","Link","to","onClick","e","preventDefault","logout","className","Login","state","username","password","handleChange","_this","setState","Object","defineProperty","target","name","value","handleSubmit","login","history","push","this","style","textAlign","onSubmit","htmlFor","type","placeholder","onChange","Component","App","componentDidMount","_cookies$cookies","cookies","console","log","Axios","post","concat","then","res","status","data","role","set","_id","catch","alert","err","window","location","reload","_this2","BrowserRouter","Switch","Route","path","render","Login_Login","assign","withCookies","Boolean","match","ReactDOM","es6","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b9a38157.chunk.js","sourcesContent":["export const hostname = 'https://idobelieveinmiracle-vah-taka-api-ver1-01.glitch.me/api';","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  const handleClick = (e) => {\r\n    e.preventDefault();\r\n    props.logout();\r\n  }\r\n\r\n  const logoutButton = props.id !== \"\" ? (<Link to=\"/\" onClick={handleClick}>Log out</Link>) : (<span></span>);\r\n\r\n  //console.log(props.id);\r\n\r\n  return (    \r\n    <div>\r\n      <nav className=\"navbar navbar-default\">\r\n        <div className=\"container-fluid\">\r\n          <div className=\"navbar-header\">\r\n            <Link className=\"navbar-brand\" to=\"/\">Taka</Link>\r\n          </div>\r\n          <ul className=\"nav navbar-nav\">\r\n            <li><Link to=\"#\">Item manager</Link></li>\r\n            <li><Link to=\"#\">Order manager</Link></li>\r\n            <li>{logoutButton}</li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Login extends Component {\r\n  state = {\r\n    username: \"\",\r\n    password: \"\"\r\n  }\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.login(this.state.username, this.state.password); // call login function from props\r\n    this.props.history.push('/');\r\n  }\r\n\r\n  render() {\r\n    if (this.props.id !== \"\") return (\r\n      <div className=\"container\">\r\n        <h3>Loged in</h3>\r\n      </div>\r\n    )\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-2\"></div>\r\n          <div className=\"col-sm-8\">\r\n            <h1 style={ {textAlign: \"center\"} }>Đăng nhập</h1>\r\n            <form onSubmit={ this.handleSubmit }>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"username\">Tên dăng nhập:</label>\r\n                <input \r\n                  type=\"text\" \r\n                  className=\"form-control\" \r\n                  id=\"username\" \r\n                  placeholder=\"Enter username\" \r\n                  name=\"username\" \r\n                  onChange={ this.handleChange }\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"password\">Mật khẩu:</label>\r\n                <input \r\n                  type=\"password\" \r\n                  className=\"form-control\" \r\n                  id=\"password\" \r\n                  placeholder=\"Enter password\" \r\n                  name=\"password\"\r\n                  onChange={ this.handleChange }\r\n                />\r\n              </div>\r\n              <button id=\"submitBtn\" type=\"submit\" className=\"btn btn-default\">Đăng nhập</button><br/><br/>\r\n            </form>\r\n          </div>\r\n        </div>        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport { withCookies } from \"react-cookie\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport {hostname} from \"./GlobalVariables\";\nimport Axios from 'axios';\nimport Navbar from './layouts/Navbar';\nimport Login from \"./components/Login\";\n\nclass App extends Component {\n  state = {\n    id: \"\",\n    username: \"\",\n    password: \"\"\n  }\n\n  componentDidMount = () => {\n    const {cookies} = this.props;\n    const {username, password} = cookies.cookies;\n    console.log(username);\n\n    Axios.post(`${hostname}/users/login`, {\n      username,\n      password\n    }).then(res => {\n      //console.log(res);\n      if (res.status === 200) {\n        if (res.data.role === \"Ad\") {\n          this.props.cookies.set('username', username);\n          this.props.cookies.set('password', password);\n  \n          this.setState({\n            username,\n            password,\n            id: res.data._id\n          })\n        }        \n      }\n    }).catch();\n  }\n\n  login = (username, password) => {    \n    Axios.post(`${hostname}/users/login`, {\n      username,\n      password\n    }).then(res => {\n      if (res.status === 200) {\n        if (res.data.role === \"Ad\") {\n          this.props.cookies.set('username', username);\n          this.props.cookies.set('password', password);\n  \n          this.setState({\n            username,\n            password,\n            id: res.data._id\n          })\n        } else alert(\"Login failed\");\n      } else alert(\"Login failed\");\n    }).catch(err =>  alert(\"Login failed\"));\n  }\n\n  logout = () => {    \n    this.props.cookies.set('username', '');\n    this.props.cookies.set('password', '');\n\n    this.setState({\n      username: \"\",\n      password: \"\",\n      id: \"\"\n    });\n    window.location.reload();\n  }\n\n  render() {\n    return (\n      <BrowserRouter>      \n        <div className=\"App\">\n          <Navbar id={this.state.id} logout={this.logout} />\n          <div className=\"container\">\n            <Switch>\n\n              <Route \n                path=\"/\"\n                render={props =>\n                  <Login {...props}\n                    id={this.state.id}\n                    login={this.login}\n                  />\n                }\n              />\n            </Switch>\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default withCookies(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CookiesProvider } from \"react-cookie\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<CookiesProvider><App /></CookiesProvider>, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}